Although [@DNNs#ai_tec*] offer high performance in many applications, their [@sub-symbolic computations#ai_tec*] with perhaps millions of parameters makes it difficult to understand exactly how input features contribute to system recommendations. Since [$DNNs#ai_tec*] high performance is critical for many applications, there is a considerable interest in how to make them more interpretable (see [39] for a review). Many algorithms for interpreting [$DNNs#ai_tec*] transform the [@DNN-processing#ai_tec*] into the original input space in order to visualize discriminating features. Typically, two general approaches are used for feature visualization, [@activation maximation#ai_tec*] and [@DNN explanation#ai_tec*]. [@Activation maximation#ai_tec*] computes which inputs features that will maximally activate possible system recommendations. For [@image classification#ai_product*], this represents the ideal images that show discriminating and recognizable features for each class. However, the images often look unnatural since the classes may use many aspects of the same object and the semantic information in images is often spread out [43]. Some examples of methods for [$activation maximation#ai_tec*] are [@gradient ascent#ai_tec*] [13], better regularization to increase generalizability [54], and synthesizing preferred images [41, 40]. [$DNN explanation#ai_tec*] explains system recommendations by highlighting discriminating input features. In [$image classification#ai_product*], such visualizations may highlight areas that provide evidence for or against a certain class [68] or only show regions that contain [@discriminating features#ai_tec*] [3]. One approach for calculating [$discriminating features#ai_tec*] is sensitivity analysis using [@local gradients#ai_tec*] or other measure of variation [39]. However, one problem with sensitivity analysis is that it may indicate [$discriminating features#ai_tec*] that are not present in the input. For example, in [$image classification#ai_product*] the sensitivity analysis may indicate obscured parts of an object rather than the visible parts [51]. Layer-wise relevance propagation avoids this problem by considering both feature presence and model reaction [4].